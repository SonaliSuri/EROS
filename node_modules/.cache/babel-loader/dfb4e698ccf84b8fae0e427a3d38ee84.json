{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sonalisuri/Desktop/erosc/Home_Page/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sonalisuri/Desktop/erosc/Home_Page/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/sonalisuri/Desktop/erosc/Home_Page/src/views/examples/TableGrid.js\";\nimport * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\n\nfunction getFullName(params) {\n  return \"\".concat(params.getValue('firstName') || '', \" \").concat(params.getValue('lastName') || '');\n}\n\nvar columns = [{\n  field: 'id',\n  headerName: 'Form Number',\n  width: 140\n}, {\n  field: 'primary_owner',\n  headerName: 'Primary Owner',\n  width: 140\n}, {\n  field: 'ship_type',\n  headerName: 'Ship Type',\n  width: 140\n}, {\n  field: 'proposed_ship_name',\n  headerName: 'Ship Name',\n  width: 140\n}, {\n  field: 'port',\n  headerName: 'Port',\n  width: 140\n}, {\n  field: 'registration_date',\n  headerName: 'Registration Date',\n  width: 170\n}, {\n  field: 'ship_lenght',\n  headerName: 'Ship Length',\n  width: 140\n}];\nvar rows = [{\n  \"id\": \"1\",\n  \"form_number\": 19,\n  \"port\": \"bababa\",\n  \"primary_owner\": \"test@ucsc.edu\",\n  \"proposed_ship_name\": \"testing999\",\n  \"registration_date\": \"Mon, 30 Nov 2020 00:00:00 GMT\",\n  \"ship_lenght\": \"111.\",\n  \"ship_type\": \"testing999\"\n}];\n\nfunction postData() {\n  return _postData.apply(this, arguments);\n}\n\nfunction _postData() {\n  _postData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url = '', data = {}) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(props); // Default options are marked with *\n\n            _context.next = 3;\n            return fetch(url, {\n              method: 'POST',\n              // *GET, POST, PUT, DELETE, etc.\n              mode: 'cors',\n              // no-cors, *cors, same-origin\n              cache: 'no-cache',\n              // *default, no-cache, reload, force-cache, only-if-cached\n              credentials: 'same-origin',\n              // include, *same-origin, omit\n              headers: {\n                'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n              },\n              redirect: 'follow',\n              // manual, *follow, error\n              referrerPolicy: 'no-referrer',\n              // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n              body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n            });\n\n          case 3:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.json());\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _postData.apply(this, arguments);\n}\n\nvar proxyurl = \"https://cors-anywhere.herokuapp.com/\";\npostData(proxyurl + 'https://ferrous-portal-295000.wl.r.appspot.com/get_grid_data', {\n  email: 'sosuri@ucsc.edu'\n}).then(data => {\n  rows = data;\n  console.log(data); // JSON data parsed by `data.json()` call\n});\nexport default function ValueGetterGrid(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 250,\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    rows: rows,\n    columns: columns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/sonalisuri/Desktop/erosc/Home_Page/src/views/examples/TableGrid.js"],"names":["React","DataGrid","getFullName","params","getValue","columns","field","headerName","width","rows","postData","url","data","console","log","props","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","proxyurl","email","then","ValueGetterGrid","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\n\nfunction getFullName(params) {\n  return `${params.getValue('firstName') || ''} ${\n    params.getValue('lastName') || ''\n  }`;\n}\n\nconst columns = [\n  { field: 'id', headerName: 'Form Number', width: 140 },\n  { field: 'primary_owner', headerName: 'Primary Owner', width: 140 },\n  { field: 'ship_type', headerName: 'Ship Type', width: 140 },\n  { field: 'proposed_ship_name', headerName: 'Ship Name', width: 140 },\n  { field: 'port', headerName: 'Port', width: 140 },\n  { field: 'registration_date', headerName: 'Registration Date', width: 170 },\n  { field: 'ship_lenght', headerName: 'Ship Length', width: 140 },\n  \n];\n\n\nvar rows = \n\n[\n    {   \"id\": \"1\",\n        \"form_number\": 19,\n        \"port\": \"bababa\",\n        \"primary_owner\": \"test@ucsc.edu\",\n        \"proposed_ship_name\": \"testing999\",\n        \"registration_date\": \"Mon, 30 Nov 2020 00:00:00 GMT\",\n        \"ship_lenght\": \"111.\",\n        \"ship_type\": \"testing999\"\n    }\n]\n\nasync function postData(url = '', data = {}) {\n    console.log(props);\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, *cors, same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: 'follow', // manual, *follow, error\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  }\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  postData(proxyurl+'https://ferrous-portal-295000.wl.r.appspot.com/get_grid_data', { email: 'sosuri@ucsc.edu' })\n    .then(data => {\n        rows=data\n      console.log(data); // JSON data parsed by `data.json()` call\n    });\n\n\n\nexport default function ValueGetterGrid(props) {\n  return (\n    <div style={{ height: 250, width: '100%' }}>\n      <DataGrid rows={rows} columns={columns} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}