{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sonalisuri/Desktop/erosc/Home_Page/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sonalisuri/Desktop/erosc/Home_Page/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/sonalisuri/Desktop/erosc/Home_Page/src/views/examples/TableGrid.js\";\nimport * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\n\nfunction getFullName(params) {\n  return \"\".concat(params.getValue('firstName') || '', \" \").concat(params.getValue('lastName') || '');\n}\n\nvar columns = [{\n  field: 'id',\n  headerName: 'Form Number',\n  width: 140\n}, {\n  field: 'primary_owner',\n  headerName: 'Username',\n  width: 140\n}, {\n  field: 'ship_type',\n  headerName: 'Ship Type',\n  width: 140\n}, {\n  field: 'proposed_ship_name',\n  headerName: 'Ship Name',\n  width: 140\n}, {\n  field: 'port',\n  headerName: 'Port',\n  width: 140\n}, {\n  field: 'registration_date',\n  headerName: 'Registration Date',\n  width: 170\n}, {\n  field: 'ship_lenght',\n  headerName: 'Ship Length',\n  width: 140\n}];\nvar rows = [{\n  \"id\": \"No records\"\n}];\nexport default function ValueGetterGrid(props) {\n  function postData() {\n    return _postData.apply(this, arguments);\n  }\n\n  function _postData() {\n    _postData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url = '', data = {}) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(url, {\n                method: 'POST',\n                // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors',\n                // no-cors, *cors, same-origin\n                cache: 'no-cache',\n                // *default, no-cache, reload, force-cache, only-if-cached\n                credentials: 'same-origin',\n                // include, *same-origin, omit\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Accept': 'application/json'\n                },\n                redirect: 'follow',\n                // manual, *follow, error\n                referrerPolicy: 'no-referrer',\n                // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n                body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n              });\n\n            case 2:\n              response = _context.sent;\n              return _context.abrupt(\"return\", response.json());\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _postData.apply(this, arguments);\n  }\n\n  var proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  console.log(props);\n  postData('https://ferrous-portal-295000.wl.r.appspot.com/get_grid_data', {\n    email: props.values.values.detail ? props.values.values.detail : props.values.values\n  }).then(data => {\n    rows = data;\n    console.log(rows); // console.log(data); // JSON data parsed by `data.json()` call\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 250,\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    rows: rows,\n    columns: columns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/sonalisuri/Desktop/erosc/Home_Page/src/views/examples/TableGrid.js"],"names":["React","DataGrid","getFullName","params","getValue","columns","field","headerName","width","rows","ValueGetterGrid","props","postData","url","data","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","proxyurl","console","log","email","values","detail","then","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\n\nfunction getFullName(params) {\n  return `${params.getValue('firstName') || ''} ${\n    params.getValue('lastName') || ''\n  }`;\n}\n\nconst columns = [\n  { field: 'id', headerName: 'Form Number', width: 140 },\n  { field: 'primary_owner', headerName: 'Username', width: 140 },\n  { field: 'ship_type', headerName: 'Ship Type', width: 140 },\n  { field: 'proposed_ship_name', headerName: 'Ship Name', width: 140 },\n  { field: 'port', headerName: 'Port', width: 140 },\n  { field: 'registration_date', headerName: 'Registration Date', width: 170 },\n  { field: 'ship_lenght', headerName: 'Ship Length', width: 140 }\n  \n];\n\n\nvar rows = \n\n[\n    {   \"id\": \"No records\",\n        \n    }\n]\nexport default function ValueGetterGrid(props) {\nasync function postData(url = '', data = {}) {\n  \n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, *cors, same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       },\n      redirect: 'follow', // manual, *follow, error\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  }\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  console.log(props);\n  postData('https://ferrous-portal-295000.wl.r.appspot.com/get_grid_data', {email: props.values.values.detail?props.values.values.detail:props.values.values})\n    .then(data => {\n        rows=data\n        console.log(rows);\n     // console.log(data); // JSON data parsed by `data.json()` call\n    });\n\n\n\n\n  return (\n    <div style={{ height: 250, width: '100%' }}>\n      <DataGrid rows={rows} columns={columns} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}